/* eslint-disable no-unused-vars */
import React, { useEffect, useState, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { gsap } from 'gsap';
import { getDoctorProfile, updateDoctorProfile } from '../../../redux/APIs/slices/doctorProfileSlice';
import { CustomToast } from '../../../components/Toast/CustomToast';
import ShortLoading from '../../../components/Loading/ShortLoading';
import { Link } from 'react-router-dom';
import { FaPlus, FaTimesCircle, FaTrash } from 'react-icons/fa';

const tabs = ['profile', 'settings', 'activity'];

const DoctorProfile = () => {
  const dispatch = useDispatch();
  const doctorProfile = useSelector((state) => state.doctorProfile || {});
  const { doctor, isLoading, isSuccess, isError, message } = doctorProfile;
  const [isUploading, setIsUploading] = useState(false);
  const [activeTab, setActiveTab] = useState('profile');
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    dateOfBirth: '',
    doctorType: '',
    description: '',
    address: '',
    education: '',
    workExperience: '',
    recentJob: '',
  });
  const [avatarFile, setAvatarFile] = useState(null);
  const [certificationImages, setCertificationImages] = useState([]); // [{file, description}]
  const [isUploadingCert, setIsUploadingCert] = useState(false);
  const [education, setEducation] = useState([{ institution: "", degree: "", year: "" }]);
  const [workExperience, setWorkExperience] = useState([{ workplace: "", position: "", startYear: "", endYear: "" }]);
  const profileCardRef = useRef(null);

  useEffect(() => {
    dispatch(getDoctorProfile());
  }, [dispatch]);

  useEffect(() => {
    if (doctor) {
      setFormData({
        fullName: doctor.fullName || '',
        email: doctor.email || '',
        phone: doctor.phone || '',
        dateOfBirth: doctor.dateOfBirth ? doctor.dateOfBirth.split('T')[0] : '',
        doctorType: doctor.doctorType || '',
        description: doctor.description || '',
        address: doctor.address || '',
        recentJob: doctor.recentJob || '',
      });
      
      // Load education and workExperience
      if (Array.isArray(doctor.education) && doctor.education.length > 0) {
        setEducation(doctor.education);
      } else {
        setEducation([{ institution: "", degree: "", year: "" }]);
      }
      
      if (Array.isArray(doctor.workExperience) && doctor.workExperience.length > 0) {
        setWorkExperience(doctor.workExperience);
      } else {
        setWorkExperience([{ workplace: "", position: "", startYear: "", endYear: "" }]);
      }
    }
  }, [doctor]);

  useEffect(() => {
    if (profileCardRef.current) {
      gsap.fromTo(
        profileCardRef.current,
        { opacity: 0, y: 50 },
        { opacity: 1, y: 0, duration: 1, ease: 'power3.out' }
      );
    }
  }, []);

  const handleChange = (e) => {
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) { // 5MB limit
        CustomToast('File quá lớn! Vui lòng chọn file nhỏ hơn 5MB', 'error');
        return;
      }
      if (!file.type.startsWith('image/')) {
        CustomToast('Vui lòng chọn file ảnh!', 'error');
        return;
      }
      setAvatarFile(file);
    }
  };

  const handleCertificationChange = (e) => {
    const files = Array.from(e.target.files);
    const newCerts = files.map((file) => ({ file, description: "" }));
    setCertificationImages((prev) => [...prev, ...newCerts]);
  };

  const removeCertification = (index) => {
    setCertificationImages((prev) => prev.filter((_, i) => i !== index));
  };

  const removeExistingCertification = (index) => {
    const updatedCertifications = [...(doctor.certifications || [])];
    updatedCertifications.splice(index, 1);
    
    // Update doctor profile with removed certification
    const formData = new FormData();
    formData.append('certifications', JSON.stringify(updatedCertifications));
    
    dispatch(updateDoctorProfile(formData)).then((res) => {
      if (res.meta.requestStatus === 'fulfilled') {
        CustomToast('Đã xóa chứng chỉ!', 'success');
        dispatch(getDoctorProfile());
      } else {
        CustomToast(res.payload?.message || 'Xóa chứng chỉ thất bại', 'error');
      }
    });
  };

  const handleCertDescriptionChange = (index, value) => {
    const updated = [...certificationImages];
    updated[index].description = value;
    setCertificationImages(updated);
  };

  // Education functions
  const handleEducationChange = (idx, field, value) => {
    setEducation(prev => prev.map((item, i) => i === idx ? { ...item, [field]: value } : item));
  };
  const handleAddEducation = () => setEducation(prev => [...prev, { institution: "", degree: "", year: "" }]);
  const handleRemoveEducation = (idx) => setEducation(prev => prev.filter((_, i) => i !== idx));

  // WorkExperience functions
  const handleWorkExpChange = (idx, field, value) => {
    setWorkExperience(prev => prev.map((item, i) => i === idx ? { ...item, [field]: value } : item));
  };
  const handleAddWorkExp = () => setWorkExperience(prev => [...prev, { workplace: "", position: "", startYear: "", endYear: "" }]);
  const handleRemoveWorkExp = (idx) => setWorkExperience(prev => prev.filter((_, i) => i !== idx));



  const handleUpdate = () => {
    // Basic validation
    if (!formData.fullName || !formData.email) {
      CustomToast('Họ tên và email là bắt buộc!', 'error');
      return;
    }

    // Check if there are actual changes
    const hasChanges = Object.keys(formData).some(key => {
      const currentValue = formData[key];
      const originalValue = doctor[key];
      
      if (key === 'education' || key === 'workExperience') {
        const currentArray = currentValue ? currentValue.split(',').map(item => item.trim()).filter(item => item) : [];
        const originalArray = Array.isArray(originalValue) ? originalValue : [];
        return JSON.stringify(currentArray) !== JSON.stringify(originalArray);
      }
      
      return currentValue !== originalValue;
    });

    if (!hasChanges && !avatarFile) {
      CustomToast('Không có thay đổi nào để cập nhật!', 'info');
      return;
    }

    // Only send changed fields
    const changedFields = {};
    Object.keys(formData).forEach(key => {
      const currentValue = formData[key];
      const originalValue = doctor[key];
      
      if (key === 'education' || key === 'workExperience') {
        const currentArray = currentValue ? currentValue.split(',').map(item => item.trim()).filter(item => item) : [];
        const originalArray = Array.isArray(originalValue) ? originalValue : [];
        if (JSON.stringify(currentArray) !== JSON.stringify(originalArray)) {
          changedFields[key] = JSON.stringify(currentArray);
        }
      } else if (currentValue !== originalValue) {
        changedFields[key] = currentValue;
      }
    });

    // Note: Avatar will be handled separately via the upload button

    // Don't send if no changes and no certifications to upload
    if (Object.keys(changedFields).length === 0 && certificationImages.length === 0) {
      CustomToast('Không có thay đổi nào để cập nhật!', 'info');
      return;
    }



    // If there are certifications to upload, use FormData
    if (certificationImages.length > 0) {
      // Check if all certifications have descriptions
      const hasEmptyDescription = certificationImages.some(cert => !cert.description.trim());
      if (hasEmptyDescription) {
        CustomToast('Vui lòng nhập mô tả cho tất cả chứng chỉ!', 'error');
        return;
      }
      
      const formData = new FormData();
      
                    // Add changed fields
              Object.keys(changedFields).forEach(key => {
                if (key === 'education' || key === 'workExperience') {
                  formData.append(key, JSON.stringify(changedFields[key]));
                } else {
                  formData.append(key, changedFields[key]);
                }
              });
              
              // Add education and workExperience
              formData.append('education', JSON.stringify(education));
              formData.append('workExperience', JSON.stringify(workExperience));
      
      // Add certifications
      certificationImages.forEach((cert, index) => {
        formData.append('certification', cert.file);
        formData.append(`description_${index}`, cert.description);
      });
      
      setIsUploadingCert(true);
      dispatch(updateDoctorProfile(formData)).then((res) => {
        setIsUploadingCert(false);
        if (res.meta.requestStatus === 'fulfilled') {
          CustomToast('Cập nhật thành công!', 'success');
          setCertificationImages([]);
          dispatch(getDoctorProfile());
        } else {
          console.error('Update error:', res.payload);
          CustomToast(res.payload?.message || 'Cập nhật thất bại', 'error');
        }
      });
    } else {
            // No certifications, use regular JSON
      dispatch(updateDoctorProfile(changedFields)).then((res) => {
        if (res.meta.requestStatus === 'fulfilled') {
          CustomToast('Cập nhật thành công!', 'success');
          setAvatarFile(null); // Clear avatar file after successful update
          dispatch(getDoctorProfile());
        } else {
          console.error('Update error:', res.payload);
          CustomToast(res.payload?.message || 'Cập nhật thất bại', 'error');
        }
      });
    }
  };

  const animateTabChange = () => {
    gsap.fromTo(
      '.tab-content',
      { opacity: 0, x: 20 },
      { opacity: 1, x: 0, duration: 0.5, ease: 'power2.out' }
    );
  };

  // Format date to dd/mm/yyyy for display
  const formatDate = (dateStr) => {
    if (!dateStr) return 'Chưa cập nhật';
    try {
      let date;
      if (dateStr.includes('-') && dateStr.split('-')[0].length === 4) {
        // YYYY-MM-DD
        date = new Date(dateStr);
      } else if (dateStr.includes('-') && dateStr.split('-')[0].length === 2) {
        // DD-MM-YYYY
        const [day, month, year] = dateStr.split('-');
        date = new Date(`${year}-${month}-${day}`);
      } else {
        date = new Date(dateStr);
      }
      if (isNaN(date.getTime())) {
        console.warn('Invalid date:', dateStr);
        return 'Chưa cập nhật';
      }
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      return `${day}/${month}/${year}`;
    } catch (error) {
      console.warn('Date parsing error:', error, dateStr);
      return 'Chưa cập nhật';
    }
  };

  const renderTabContent = () => {
    const isDisabled = doctor?.status !== 'accepted';
    switch (activeTab) {
      case 'profile':
        return (
          <div className="tab-content p-6 space-y-4 overflow-y-auto max-h-[calc(100vh-250px)]">
            <h2 className="text-2xl font-bold text-gray-800">Thông tin bác sĩ</h2>
            <div className="flex items-start gap-6">
              <div className="flex flex-col items-center gap-3">
                <div className="relative group">
                  <img
                    src={avatarFile ? URL.createObjectURL(avatarFile) : (doctor?.avatar || '/default-avatar.png')}
                    alt="avatar"
                    className="w-32 h-32 rounded-full border-4 border-white shadow-lg object-cover transition-all duration-300 group-hover:scale-105"
                    ref={(el) => {
                      if (el) {
                        gsap.fromTo(
                          el,
                          { scale: 0.5, opacity: 0 },
                          { scale: 1, opacity: 1, duration: 0.8, ease: 'elastic.out(1, 0.5)' }
                        );
                      }
                    }}
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                    <label className="cursor-pointer text-white text-sm font-medium">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      </svg>
                    </label>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleAvatarChange}
                      className="hidden"
                    />
                  </div>
                </div>
                {avatarFile && (
                  <div className="text-center">
                    <p className="text-sm text-green-600 font-medium">Ảnh đã chọn: {avatarFile.name}</p>
                    <button
                      onClick={() => setAvatarFile(null)}
                      className="text-xs text-red-500 hover:text-red-700 mt-1"
                    >
                      Hủy
                    </button>
                  </div>
                )}
              </div>
              <div className="space-y-3 flex-1">
                <Input label="Họ tên" name="fullName" value={formData.fullName} onChange={handleChange} disabled={isDisabled} />
                <Input label="Email" name="email" value={formData.email} onChange={handleChange} disabled={isDisabled} />
                <Input label="Số điện thoại" name="phone" value={formData.phone} onChange={handleChange} disabled={isDisabled} />
              </div>
            </div>
            <div className="grid md:grid-cols-2 gap-4">
              <Input
                label="Ngày sinh"
                name="dateOfBirth"
                type="date"
                value={formData.dateOfBirth}
                onChange={handleChange}
                disabled={isDisabled}
              />
              <Input label="Chuyên khoa" name="doctorType" value={formData.doctorType} onChange={handleChange} disabled={isDisabled} />
              <Input
                label="Trạng thái đăng ký"
                value={
                  doctor?.status === 'accepted'
                    ? 'Đã chấp nhận'
                    : doctor?.status === 'pending'
                    ? 'Chờ duyệt'
                    : 'Từ chối'
                }
                disabled
                className={`font-semibold ${
                  doctor?.status === 'accepted' ? 'text-green-600' : 'text-yellow-600'
                }`}
              />
              <Input label="Vai trò" value={doctor?.role || 'Chưa cập nhật'} disabled />
              <Input label="Mô tả" name="description" value={formData.description} onChange={handleChange} disabled={isDisabled} />
              <Input label="Địa chỉ" name="address" value={formData.address} onChange={handleChange} disabled={isDisabled} />
              <Input
                label="Gói đăng ký"
                value={doctor?.subscription?.packageType || 'Chưa cập nhật'}
                disabled
              />
              <Input
                label="Ngày bắt đầu đăng ký"
                value={formatDate(doctor?.subscription?.startDate)}
                disabled
              />
              <Input
                label="Ngày kết thúc đăng ký"
                value={formatDate(doctor?.subscription?.endDate)}
                disabled
              />
              <Input
                label="Ưu tiên"
                value={doctor?.subscription?.isPriority ? 'Có' : 'Không'}
                disabled
              />
              <Input label="Ngày tạo" value={formatDate(doctor?.createdAt)} disabled />
              <Input label="Ngày cập nhật" value={formatDate(doctor?.updatedAt)} disabled

 />
              <Input
                label="Giới hạn lịch hàng tuần"
                value={`${doctor?.subscription?.scheduleLimits?.weekly || 0} (Đã dùng: ${doctor?.subscription?.scheduleLimits?.used || 0})`}
                disabled
              />
              <Input
                label="Ngày đặt lại lịch"
                value={formatDate(doctor?.subscription?.scheduleLimits?.resetDate)}
                disabled
              />
              <Input
                label="Tin nhắn từ chối"
                value={doctor?.rejectionMessage || 'Không có'}
                disabled
              />
              {/* Học vấn */}
              <div>
                <label className="block text-sm font-medium text-gray-700">Học vấn</label>
                {Array.isArray(doctor?.education) && doctor.education.length > 0 ? (
                  <ul className="list-disc pl-5 text-sm text-gray-700">
                    {doctor.education.map(e => (
                      <li key={e._id}>{e.institution} - {e.degree} ({e.year})</li>
                    ))}
                  </ul>
                ) : (
                  <span className="text-gray-400">Chưa cập nhật</span>
                )}
              </div>
              {/* Kinh nghiệm làm việc */}
              <div>
                <label className="block text-sm font-medium text-gray-700">Kinh nghiệm làm việc</label>
                {Array.isArray(doctor?.workExperience) && doctor.workExperience.length > 0 ? (
                  <ul className="list-disc pl-5 text-sm text-gray-700">
                    {doctor.workExperience.map(w => (
                      <li key={w._id}>{w.workplace} - {w.position} ({w.startYear} - {w.endYear})</li>
                    ))}
                  </ul>
                ) : (
                  <span className="text-gray-400">Chưa cập nhật</span>
                )}
              </div>
              <Input
                label="Công việc gần đây"
                name="recentJob"
                value={formData.recentJob}
                onChange={handleChange}
                disabled={isDisabled}
                placeholder="Nhập công việc gần đây"
              />
            </div>
            <div className="space-y-6">
              {/* Education Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800">Học vấn</h3>
                {education.map((edu, idx) => (
                  <div key={idx} className="bg-white p-4 rounded-lg border shadow-sm">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <Input
                        label="Trường học"
                        name="institution"
                        value={edu.institution}
                        onChange={(e) => handleEducationChange(idx, 'institution', e.target.value)}
                        placeholder="Nhập tên trường"
                      />
                      <Input
                        label="Bằng cấp"
                        name="degree"
                        value={edu.degree}
                        onChange={(e) => handleEducationChange(idx, 'degree', e.target.value)}
                        placeholder="Nhập bằng cấp"
                      />
                      <Input
                        label="Năm tốt nghiệp"
                        name="year"
                        value={edu.year}
                        onChange={(e) => handleEducationChange(idx, 'year', e.target.value)}
                        placeholder="Nhập năm"
                      />
                    </div>
                    {education.length > 1 && (
                      <button
                        type="button"
                        onClick={() => handleRemoveEducation(idx)}
                        className="mt-2 text-red-500 hover:text-red-700 text-sm"
                      >
                        <FaTimesCircle className="inline mr-1" />
                        Xóa
                      </button>
                    )}
                  </div>
                ))}
                <button
                  type="button"
                  onClick={handleAddEducation}
                  className="flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm"
                >
                  <FaPlus className="w-4 h-4" />
                  Thêm học vấn
                </button>
              </div>

              {/* Work Experience Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800">Kinh nghiệm làm việc</h3>
                {workExperience.map((work, idx) => (
                  <div key={idx} className="bg-white p-4 rounded-lg border shadow-sm">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Input
                        label="Nơi làm việc"
                        name="workplace"
                        value={work.workplace}
                        onChange={(e) => handleWorkExpChange(idx, 'workplace', e.target.value)}
                        placeholder="Nhập tên bệnh viện/cơ sở"
                      />
                      <Input
                        label="Chức vụ"
                        name="position"
                        value={work.position}
                        onChange={(e) => handleWorkExpChange(idx, 'position', e.target.value)}
                        placeholder="Nhập chức vụ"
                      />
                      <Input
                        label="Năm bắt đầu"
                        name="startYear"
                        value={work.startYear}
                        onChange={(e) => handleWorkExpChange(idx, 'startYear', e.target.value)}
                        placeholder="Nhập năm"
                      />
                      <Input
                        label="Năm kết thúc"
                        name="endYear"
                        value={work.endYear}
                        onChange={(e) => handleWorkExpChange(idx, 'endYear', e.target.value)}
                        placeholder="Nhập năm (để trống nếu hiện tại)"
                      />
                    </div>
                    {workExperience.length > 1 && (
                      <button
                        type="button"
                        onClick={() => handleRemoveWorkExp(idx)}
                        className="mt-2 text-red-500 hover:text-red-700 text-sm"
                      >
                        <FaTimesCircle className="inline mr-1" />
                        Xóa
                      </button>
                    )}
                  </div>
                ))}
                <button
                  type="button"
                  onClick={handleAddWorkExp}
                  className="flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm"
                >
                  <FaPlus className="w-4 h-4" />
                  Thêm kinh nghiệm
                </button>
              </div>

              {/* Certifications Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800">Chứng chỉ</h3>
              
              {/* Existing certifications */}
              {doctor?.certifications?.length ? (
                <div className="space-y-2">
                  {doctor.certifications.map((cert, index) => (
                    <div key={cert._id || index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border group">
                      <div className="flex items-center gap-3">
                        <svg className="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        <a
                          href={cert.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:underline font-medium"
                        >
                          {cert.description || 'Chứng chỉ'}
                        </a>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-500">
                          {formatDate(cert.uploadedAt)}
                        </span>
                        <button
                          onClick={() => removeExistingCertification(index)}
                          className="text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity duration-200"
                          title="Xóa chứng chỉ"
                        >
                          <FaTrash className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 italic">Chưa có chứng chỉ nào</p>
              )}

              {/* Upload new certification */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 bg-gray-50">
                <h4 className="text-sm font-medium text-gray-700 mb-3">Thêm chứng chỉ mới</h4>
                
                {/* Certification previews */}
                <div className="flex flex-wrap gap-4 mb-4">
                  {certificationImages.map(({ file, description }, index) => (
                    <div key={index} className="relative w-28">
                      <img src={URL.createObjectURL(file)} alt={`cert-${index}`} className="w-28 h-28 object-cover rounded-xl" />
                      <button 
                        type="button" 
                        className="absolute -top-2 -right-2 text-red-600 bg-white rounded-full shadow hover:bg-red-50" 
                        onClick={() => removeCertification(index)}
                      >
                        <FaTimesCircle size={18} />
                      </button>
                      <input 
                        type="text" 
                        placeholder="Mô tả" 
                        value={description} 
                        onChange={e => handleCertDescriptionChange(index, e.target.value)} 
                        className="mt-1 w-full px-2 py-1 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
                      />
                    </div>
                  ))}
                  
                  {/* Add certification button */}
                  <label className="flex items-center justify-center w-28 h-28 border-2 border-dashed border-gray-300 bg-gray-100 rounded-xl cursor-pointer hover:border-blue-400 transition-colors">
                    <FaPlus size={20} className="text-gray-500" />
                    <input 
                      type="file" 
                      accept="image/*" 
                      multiple 
                      onChange={handleCertificationChange} 
                      className="hidden" 
                    />
                  </label>
                </div>

                {/* Note: Certifications will be uploaded with the main update button */}
                {certificationImages.length > 0 && (
                  <div className="text-sm text-blue-600 font-medium">
                    ✓ {certificationImages.length} chứng chỉ sẽ được tải lên khi bấm "Cập nhật"
                  </div>
                )}
              </div>
            </div>
            <div className="flex gap-3 pt-4">
              <button
                onClick={handleUpdate}
                disabled={isDisabled || isUploadingCert}
                className={`flex items-center gap-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-lg shadow-lg transition-all duration-300 ${
                  (isDisabled || isUploadingCert) ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-xl transform hover:scale-105'
                }`}
                onMouseEnter={(e) => !(isDisabled || isUploadingCert) && gsap.to(e.target, { scale: 1.05, duration: 0.3 })}
                onMouseLeave={(e) => !(isDisabled || isUploadingCert) && gsap.to(e.target, { scale: 1, duration: 0.3 })}
              >
                {isUploadingCert ? (
                  <svg className="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                ) : (
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
                  </svg>
                )}
                {isUploadingCert ? 'Đang cập nhật...' : 'Cập nhật thông tin'}
              </button>
              
              {avatarFile && (
                                  <button
                    onClick={() => {
                      setIsUploading(true);
                      // Upload avatar separately
                      const formData = new FormData();
                      formData.append('avatar', avatarFile);
                      
                      dispatch(updateDoctorProfile(formData)).then((res) => {
                        setIsUploading(false);
                        if (res.meta.requestStatus === 'fulfilled') {
                          CustomToast('Tải lên ảnh thành công!', 'success');
                          setAvatarFile(null);
                          dispatch(getDoctorProfile());
                        } else {
                          CustomToast(res.payload?.message || 'Tải lên ảnh thất bại', 'error');
                        }
                      });
                    }}
                    disabled={isUploading}
                    className={`flex items-center gap-2 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-semibold px-6 py-3 rounded-lg shadow-lg transition-all duration-300 hover:shadow-xl transform hover:scale-105 ${
                      isUploading ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                  >
                    {isUploading ? (
                      <svg className="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    ) : (
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      </svg>
                    )}
                    {isUploading ? 'Đang tải lên...' : 'Tải lên ảnh'}
                  </button>
              )}
            </div>
          </div>
        );

      case 'settings':
        return (
          <div className="tab-content p-6">
            <h2 className="text-2xl font-sm font-semibold text-gray-800">Cài đặt</h2>
            <p>Chức năng đang phát triển.</p>
          </div>
        );

      case 'activity':
        return (
          <div className="tab-content p-6 space-y-4">
            <h2 className="text-2xl font-bold text-gray-800">Hoạt động gần đây</h2>
            <Activity title="Lịch hẹn" items={doctor?.appointments || []} />
            <Activity title="Bệnh nhân" items={doctor?.patients || []} />
            <Activity title="Blog đã thích" items={doctor?.likedBlogs || []} />
            <Activity title="Cuộc trò chuyện" items={doctor?.conversations || []} />
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center pt-20 md:pt-4 pb-24 md:pb-4 bg-gradient-to-br from-blue-100 to-purple-100 p-4">
      <Link
        to="/"
        className="fixed top-4 left-4 bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold px-6 py-3 rounded-full shadow-lg hover:shadow-xl transition-shadow duration-300 flex items-center gap-2 group"
        onMouseEnter={(e) => gsap.to(e.target, { scale: 1.1, duration: 0.3 })}
        onMouseLeave={(e) => gsap.to(e.target, { scale: 1, duration: 0.3 })}
      >
        <svg
          className="w-5 h-5 transform group-hover:-translate-x-1 transition-transform"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Home
      </Link>
      <div
        ref={profileCardRef}
        className="profile-card max-w-xl w-full bg-white rounded-xl shadow-2xl overflow-hidden"
      >
        {isLoading && <ShortLoading text="Đang tải thông tin bác sĩ..." />}
        {isError && <div className="p-6 text-center text-red-500">{message}</div>}
        {!isSuccess && !isLoading && !isError && (
          <div className="p-6 text-center text-gray-500">Không có dữ liệu để hiển thị</div>
        )}
        {isSuccess && (
          <>
            <div className="bg-blue-600 p-6 text-white text-center">
              <h1
                className="text-3xl font-bold"
                ref={(el) => {
                  if (el) {
                    gsap.fromTo(
                      el,
                      { opacity: 0, y: -20 },
                      { opacity: 1, y: 0, duration: 0.8, ease: 'power3.out' }
                    );
                  }
                }}
              >
                Thông tin bác sĩ
              </h1>
              <p className="text-sm mt-2">{message}</p>
            </div>

            <nav className="flex border-b border-gray-200">
              {tabs.map((tab) => (
                <button
                  key={tab}
                  className={`flex-1 py-4 px-6 text-center font-medium transition ${
                    activeTab === tab ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                  }`}
                  onClick={() => {
                    setActiveTab(tab);
                    animateTabChange();
                  }}
                  onMouseEnter={(e) => gsap.to(e.target, { scale: 1.05, duration: 0.3 })}
                  onMouseLeave={(e) => gsap.to(e.target, { scale: 1, duration: 0.3 })}
                >
                  {tab.charAt(0).toUpperCase() + tab.slice(1)}
                </button>
              ))}
            </nav>

            {renderTabContent()}
          </>
        )}
      </div>
    </div>
  );
};

const Input = ({ label, name, value, onChange, type = 'text', disabled = false, className = '', placeholder }) => {
  const inputRef = useRef(null);
  const hasAnimated = useRef(false);

  useEffect(() => {
    if (inputRef.current && !hasAnimated.current) {
      gsap.fromTo(
        inputRef.current,
        { opacity: 0, x: -10 },
        { opacity: 1, x: 0, duration: 0.3, ease: 'power2.out' }
      );
      hasAnimated.current = true;
    }
  }, []);

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700">{label}</label>
      <input
        ref={inputRef}
        type={type}
        name={name}
        value={value || ''}
        onChange={onChange}
        disabled={disabled}
        placeholder={placeholder}
        className={`mt-1 w-full max-w-lg border border-gray-300 rounded-md px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100 ${className}`}
      />
    </div>
  );
};

const Activity = ({ title, items }) => {
  const activityRef = useRef(null);

  useEffect(() => {
    if (activityRef.current) {
      gsap.fromTo(
        activityRef.current,
        { opacity: 0, x: 20 },
        { opacity: 1, x: 0, duration: 0.4, ease: 'power2.out' }
      );
    }
  }, []);

  return (
    <div ref={activityRef}>
      <h3 className="text-lg font-semibold">{title}</h3>
      <p>{items?.length ? items.join(', ') : `Chưa có ${title.toLowerCase()}`}</p>
    </div>
  );
};

export default DoctorProfile;